library(randomForest)
mod_rf<- randomForest(form,train,ntree=1000)
mod_rf
library(NHANES)
library(tidyverse)
library(glmnet)
data2<- NHANES %>%
select(Gender,Age,Race1,Education,MaritalStatus,HHIncomeMid,Poverty,HomeOwn,Weight,Height,
BMI,Pulse,BPSysAve,BPDiaAve,Diabetes,HealthGen,DaysPhysHlthBad,DaysMentHlthBad,
Depressed,SleepHrsNight,SleepTrouble,AlcoholDay,Smoke100,Marijuana,HardDrugs) %>%
drop_na()
set.seed(100)
train2 <- data2 %>% sample_frac(size = 0.8, fac=HardDrugs)
test2 <- data2 %>% setdiff(train2)
library(rpart)
library(rpart.plot)
form<- as.formula(HardDrugs~Gender+Age+Race1+Education+MaritalStatus+HHIncomeMid+Poverty+HomeOwn+Weight+Height+BMI+Pulse+BPSysAve+BPDiaAve+Diabetes+HealthGen+DaysPhysHlthBad+DaysMentHlthBad+Depressed+SleepHrsNight+SleepTrouble+AlcoholDay+Smoke100+Marijuana)
mod_tree <- rpart(form,data=train2)
library(randomForest)
mod_rf<- randomForest(form,train2,ntree=1000)
mod_rf
confusion_matrix <- function(data,y,mod){
confusion_matrix <- data %>%
mutate(pred = predict(mod, newdata = data, type = "class"),
y=y) %>%
select(y,pred) %>% table()
}
misclass <- function(confusion){
misclass <- 1- sum(diag(confusion))/sum(confusion)
return(misclass)
}
confusion_rf <- confusion_matrix(test2, test2$HardDrugs, mod_rf)
misclass(confusion_rf)
library(e1071)
mod_nb <- naiveBayes(HardDrugs~ ., data=train2)
HardDrugs_nb <- predict(mod_nb, newdata=test2)
confusion_nb<-table(HardDrugs_nb, test2$HardDrugs);
misclass_test_nb <- 1-sum(diag(confusion_nb))/sum(confusion_nb)
misclass_test_nb
# Random Forest
## Sensitivity
tpr_rf = confusion_rf[2,2]/sum(confusion_rf[2,]); tpr_rf
## Specificity
tnr_rf = confusion_rf[1,1]/sum(confusion_rf[1,]); tnr_rf
set.seed(100)
mod_tree <- rpart(form,data=train2)
library(ROCR)
roc_data <- function(test,y_test,model,type){
prob = model %>%
predict(newdata=test, type=type) %>%
as.data.frame()
pred_prob = prediction(prob[,2], y_test)
perf = performance(pred_prob, 'tpr', 'fpr')
perf_df = data.frame(perf@x.values, perf@y.values)
names(perf_df)=c('fpr','tpr')
return(perf_df)
}
point_data <- function(test,y_test,model,type){
y_pred = predict(model, newdata=test,type=type)
confusion_matrix = table(y_test, y_pred)
tpr = confusion_matrix['Yes','Yes']/sum(confusion_matrix['Yes',])
fpr = confusion_matrix['No','Yes']/sum(confusion_matrix['No',])
return(c(fpr,tpr))
}
perf_df_rf = roc_data(test2, test2$HardDrugs, mod_rf, "prob")
point_rf = point_data(test2, test2$HardDrugs, mod_rf, "class")
perf_df_nb = roc_data(test2, test2$HardDrugs, mod_nb, "raw")
point_nb = point_data(test2, test2$HardDrugs, mod_nb, "class")
perf_df_dt = roc_data(test2, test2$HardDrugs, mod_tree, "prob")
point_dt = point_data(test2, test2$HardDrugs, mod_tree, "class")
ggplot(data =perf_df_rf, aes(x=fpr, y=tpr))+
geom_line(color="purple",lwd=1)+
geom_line(data = perf_df_nb, color="orange",lwd=1)+
geom_line(data = perf_df_dt, color="blue",lwd=1)+
geom_point(x=point_rf[1],y=point_rf[2],size=3,col="red")+
geom_point(x=point_nb[1],y=point_nb[2],size=3,col="green")+
geom_point(x=point_dt[1],y=point_dt[2],size=3,col="yellow")+
labs(x='False Positive Rate', y='True Positive Rate')
library(caret)
control <- trainControl(method="repeatedcv", number=5,
repeats=2, search="grid")
set.seed(100)
tunegrid <- expand.grid(.mtry=seq(2,20,2))
rf_gridsearch <- train(HardDrugs~., data=train2, method="rf",
metric="Accuracy", tuneGrid=tunegrid,
trControl=control)
print(rf_gridsearch)
HardDrugs_mtry <- predict(rf_gridsearch, newdata=test2)
confusion_mtry<-table(HardDrugs_mtry, test2$HardDrugs);
misclass_test_mtry <- 1-sum(diag(confusion_mtry))/sum(confusion_mtry)
misclass_test_mtry
library(rpart)
library(rpart.plot)
form<- as.formula(rating~comp_id+apps+minutes+goals+xG+assists+xA)
mod_tree <- rpart(form,data=train)
library(randomForest)
mod_rf<- randomForest(form,train,ntree=1000,importance=TRUE)
mod_rf
# Get variable importance from the model fit
ImpData <- as.data.frame(importance(rf.fit))
library(rpart)
library(rpart.plot)
form<- as.formula(rating~.)
mod_tree <- rpart(form,data=train)
library(randomForest)
mod_rf<- randomForest(form,train,ntree=1000,importance=TRUE)
mod_rf
# Get variable importance from the model fit
ImpData <- as.data.frame(importance(rf.fit))
# Get variable importance from the model fit
ImpData <- as.data.frame(importance(mod_rf))
ImpData$Var.Names <- row.names(ImpData)
ggplot(ImpData, aes(x=Var.Names, y=`%IncMSE`)) +
geom_segment( aes(x=Var.Names, xend=Var.Names, y=0, yend=`%IncMSE`), color="skyblue") +
geom_point(aes(size = IncNodePurity), color="blue", alpha=0.6) +
theme_light() +
coord_flip() +
theme(
legend.position="bottom",
panel.grid.major.y = element_blank(),
panel.border = element_blank(),
axis.ticks.y = element_blank()
)
data<- tab #%>%
#select(player_name_futbin,rating,comp_id,apps,minutes,goals,xG,assists,xA,shots,key_passes,yellow_cards,red_cards,npg,npxG,xGChain,xGBuildup)
set.seed(100)
train <- data %>% sample_frac(size = 0.8, fac=rating)
test <- data %>% setdiff(train2)
data<- tab #%>%
#select(player_name_futbin,rating,comp_id,apps,minutes,goals,xG,assists,xA,shots,key_passes,yellow_cards,red_cards,npg,npxG,xGChain,xGBuildup)
set.seed(100)
train <- data %>% sample_frac(size = 0.8, fac=rating)
test <- data %>% setdiff(train)
train
library(rpart)
library(rpart.plot)
form<- as.formula(rating~.)
mod_tree <- rpart(form,data=train)
library(randomForest)
mod_rf<- randomForest(form,train,ntree=1000,importance=TRUE)
data<- tab #%>%
#select(player_name_futbin,rating,comp_id,apps,minutes,goals,xG,assists,xA,shots,key_passes,yellow_cards,red_cards,npg,npxG,xGChain,xGBuildup)
set.seed(100)
data[is.na(data)] <- 0
train <- data %>% sample_frac(size = 0.8, fac=rating)
test <- data %>% setdiff(train)
train
library(rpart)
library(rpart.plot)
form<- as.formula(rating~.)
mod_tree <- rpart(form,data=train)
library(randomForest)
mod_rf<- randomForest(form,train,ntree=1000,importance=TRUE)
mod_rf
# Get variable importance from the model fit
ImpData <- as.data.frame(importance(mod_rf))
ImpData$Var.Names <- row.names(ImpData)
ggplot(ImpData, aes(x=Var.Names, y=`%IncMSE`)) +
geom_segment( aes(x=Var.Names, xend=Var.Names, y=0, yend=`%IncMSE`), color="skyblue") +
geom_point(aes(size = IncNodePurity), color="blue", alpha=0.6) +
theme_light() +
coord_flip() +
theme(
legend.position="bottom",
panel.grid.major.y = element_blank(),
panel.border = element_blank(),
axis.ticks.y = element_blank()
)
res <- dbSendQuery(con, "SELECT * FROM PLAYER p JOIN PLAYER_STATS ps ON p.player_id = ps.player_id
JOIN PLAYER_RATINGS pr ON p.player_id = pr.player_id
WHERE ps.season = pr.season")
library(DBI)
con <- dbConnect(RPostgres::Postgres(),
dbname = 'postgres',
host = 'localhost',
port = 5432,
user = 'postgres',
password = 'password')
res <- dbSendQuery(con, "SELECT * FROM PLAYER p JOIN PLAYER_STATS ps ON p.player_id = ps.player_id
JOIN PLAYER_RATINGS pr ON p.player_id = pr.player_id
WHERE ps.season = pr.season")
tab = dbFetch(res)
dbClearResult(res)
tab
res <- dbSendQuery(con, "SELECT * FROM PLAYER p JOIN PLAYER_STATS ps ON p.player_id = ps.player_id
JOIN PLAYER_RATINGS pr ON p.player_id = pr.player_id
WHERE ps.season = pr.season-1")
tab = dbFetch(res)
dbClearResult(res)
tab
res <- dbSendQuery(con, "(SELECT * FROM PLAYER p JOIN PLAYER_STATS ps ON p.player_id = ps.player_id
JOIN PLAYER_RATINGS pr ON p.player_id = pr.player_id
WHERE ps.season = pr.season-1) JOIN (SELECT player_id, player_name_futbin, season, rating FROM PLAYER_RATINGS prevr)
ON prevr.season = ps.season")
res <- dbSendQuery(con, ("SELECT *
FROM PLAYER p
JOIN PLAYER_STATS ps ON p.player_id = ps.player_id
JOIN PLAYER_RATINGS prevr ON p.player_id = prevr.player_id
JOIN PLAYER_RATINGS curr ON p.player_id = curr.player_id
WHERE ps.season = prevr.season AND ps.season = curr.season-1")
tab = dbFetch(res)
res <- dbSendQuery(con, ("SELECT *
FROM PLAYER p
JOIN PLAYER_STATS ps ON p.player_id = ps.player_id
JOIN PLAYER_RATINGS prevr ON p.player_id = prevr.player_id
JOIN PLAYER_RATINGS curr ON p.player_id = curr.player_id
WHERE ps.season = prevr.season AND ps.season = curr.season-1;")
tab = dbFetch(res)
res <- dbSendQuery(con, ("SELECT *
FROM PLAYER p
JOIN PLAYER_STATS ps ON p.player_id = ps.player_id
JOIN PLAYER_RATINGS prevr ON p.player_id = prevr.player_id
JOIN PLAYER_RATINGS curr ON p.player_id = curr.player_id
WHERE ps.season = prevr.season AND ps.season = curr.season-1;"))
tab = dbFetch(res)
dbClearResult(res)
res <- dbSendQuery(con, ("SELECT *, *, curr.*, prevr.*
FROM PLAYER p
JOIN PLAYER_STATS ps ON p.player_id = ps.player_id
JOIN PLAYER_RATINGS prevr ON p.player_id = prevr.player_id
JOIN PLAYER_RATINGS curr ON p.player_id = curr.player_id
WHERE ps.season = prevr.season AND ps.season = curr.season-1;"))
tab = dbFetch(res)
dbClearResult(res)
tab
res <- dbSendQuery(con, ("SELECT p.*, ps.*, curr.*, prevr.*
FROM PLAYER p
JOIN PLAYER_STATS ps ON p.player_id = ps.player_id
JOIN PLAYER_RATINGS prevr ON p.player_id = prevr.player_id
JOIN PLAYER_RATINGS curr ON p.player_id = curr.player_id
WHERE ps.season = prevr.season AND ps.season = curr.season-1;"))
tab = dbFetch(res)
dbClearResult(res)
tab
data<- tab #%>%
#select(player_name_futbin,rating,comp_id,apps,minutes,goals,xG,assists,xA,shots,key_passes,yellow_cards,red_cards,npg,npxG,xGChain,xGBuildup)
set.seed(100)
data[is.na(data)] <- 0
train <- data %>% sample_frac(size = 0.8, fac=rating..27)
library(DBI)
con <- dbConnect(RPostgres::Postgres(),
dbname = 'postgres',
host = 'localhost',
port = 5432,
user = 'postgres',
password = 'password')
res <- dbSendQuery(con, ("SELECT p.*, ps.*, curr.*, prevr.*
FROM PLAYER p
JOIN PLAYER_STATS ps ON p.player_id = ps.player_id
JOIN PLAYER_RATINGS prevr ON p.player_id = prevr.player_id
JOIN PLAYER_RATINGS curr ON p.player_id = curr.player_id
WHERE ps.season = prevr.season AND ps.season = curr.season-1;"))
tab = dbFetch(res)
dbClearResult(res)
tab
data<- tab #%>%
#select(player_name_futbin,rating,comp_id,apps,minutes,goals,xG,assists,xA,shots,key_passes,yellow_cards,red_cards,npg,npxG,xGChain,xGBuildup)
set.seed(100)
data[is.na(data)] <- 0
train <- data %>% sample_frac(size = 0.8, fac=rating..27)
data<- tab #%>%
#select(player_name_futbin,rating,comp_id,apps,minutes,goals,xG,assists,xA,shots,key_passes,yellow_cards,red_cards,npg,npxG,xGChain,xGBuildup)
set.seed(100)
data[is.na(data)] <- 0
train <- data %>% sample_frac(size = 0.8, fac=rating)
library(NHANES)
library(tidyverse)
library(glmnet)
library(tidyverse)
library(glmnet)
data<- tab #%>%
#select(player_name_futbin,rating,comp_id,apps,minutes,goals,xG,assists,xA,shots,key_passes,yellow_cards,red_cards,npg,npxG,xGChain,xGBuildup)
set.seed(100)
data[is.na(data)] <- 0
train <- data %>% sample_frac(size = 0.8, fac=rating)
test <- data %>% setdiff(train)
library(tidyverse)
library(glmnet)
data<- tab #%>%
#select(player_name_futbin,rating,comp_id,apps,minutes,goals,xG,assists,xA,shots,key_passes,yellow_cards,red_cards,npg,npxG,xGChain,xGBuildup)
set.seed(100)
data[is.na(data)] <- 0
train <- data %>% sample_frac(size = 0.8, fac=rating..27)
test <- data %>% setdiff(train)
train
library(rpart)
library(rpart.plot)
form<- as.formula(rating..27~.)
mod_tree <- rpart(form,data=train)
library(rpart)
library(rpart.plot)
form<- as.formula(rating~.)
mod_tree <- rpart(form,data=train)
library(randomForest)
mod_rf<- randomForest(form,train,ntree=1000,importance=TRUE)
mod_rf
library(DBI)
con <- dbConnect(RPostgres::Postgres(),
dbname = 'postgres',
host = 'localhost',
port = 5432,
user = 'postgres',
password = 'password')
res <- dbSendQuery(con, ("SELECT p.*, ps.*, curr.rating, prevr.*
FROM PLAYER p
JOIN PLAYER_STATS ps ON p.player_id = ps.player_id
JOIN PLAYER_RATINGS prevr ON p.player_id = prevr.player_id
JOIN PLAYER_RATINGS curr ON p.player_id = curr.player_id
WHERE ps.season = prevr.season AND ps.season = curr.season-1;"))
tab = dbFetch(res)
dbClearResult(res)
tab
tab
library(tidyverse)
library(glmnet)
data<- tab #%>%
#select(player_name_futbin,rating,comp_id,apps,minutes,goals,xG,assists,xA,shots,key_passes,yellow_cards,red_cards,npg,npxG,xGChain,xGBuildup)
set.seed(100)
data[is.na(data)] <- 0
train <- data %>% sample_frac(size = 0.8, fac=rating..27)
test <- data %>% setdiff(train)
train
library(rpart)
library(rpart.plot)
form<- as.formula(rating~.)
mod_tree <- rpart(form,data=train)
library(randomForest)
mod_rf<- randomForest(form,train,ntree=1000,importance=TRUE)
mod_rf
# Get variable importance from the model fit
ImpData <- as.data.frame(importance(mod_rf))
ImpData$Var.Names <- row.names(ImpData)
ggplot(ImpData, aes(x=Var.Names, y=`%IncMSE`)) +
geom_segment( aes(x=Var.Names, xend=Var.Names, y=0, yend=`%IncMSE`), color="skyblue") +
geom_point(aes(size = IncNodePurity), color="blue", alpha=0.6) +
theme_light() +
coord_flip() +
theme(
legend.position="bottom",
panel.grid.major.y = element_blank(),
panel.border = element_blank(),
axis.ticks.y = element_blank()
)
library(DBI)
con <- dbConnect(RPostgres::Postgres(),
dbname = 'postgres',
host = 'localhost',
port = 5432,
user = 'postgres',
password = 'password')
res <- dbSendQuery(con, ("SELECT p.*, ps.*, curr.rating, prevr.*
FROM PLAYER p
JOIN PLAYER_STATS ps ON p.player_id = ps.player_id
JOIN PLAYER_RATINGS prevr ON p.player_id = prevr.player_id
JOIN PLAYER_RATINGS curr ON p.player_id = curr.player_id
WHERE ps.season = prevr.season AND ps.season = curr.season-1;"))
tab = dbFetch(res)
dbClearResult(res)
tab
library(tidyverse)
library(glmnet)
data<- tab #%>%
#select(player_name_futbin,rating,comp_id,apps,minutes,goals,xG,assists,xA,shots,key_passes,yellow_cards,red_cards,npg,npxG,xGChain,xGBuildup)
set.seed(100)
data[is.na(data)] <- 0
train <- data %>% sample_frac(size = 0.8, fac=rating)
test <- data %>% setdiff(train)
train
library(rpart)
library(rpart.plot)
form<- as.formula(rating~.)
mod_tree <- rpart(form,data=train)
library(randomForest)
mod_rf<- randomForest(form,train,ntree=1000,importance=TRUE)
mod_rf
# Get variable importance from the model fit
ImpData <- as.data.frame(importance(mod_rf))
ImpData$Var.Names <- row.names(ImpData)
ggplot(ImpData, aes(x=Var.Names, y=`%IncMSE`)) +
geom_segment( aes(x=Var.Names, xend=Var.Names, y=0, yend=`%IncMSE`), color="skyblue") +
geom_point(aes(size = IncNodePurity), color="blue", alpha=0.6) +
theme_light() +
coord_flip() +
theme(
legend.position="bottom",
panel.grid.major.y = element_blank(),
panel.border = element_blank(),
axis.ticks.y = element_blank()
)
res <- dbSendQuery(con, ("SELECT p.*, ps.*, curr.rating, prevr.*
FROM PLAYER p
JOIN PLAYER_STATS ps ON p.player_id = ps.player_id
JOIN PLAYER_RATINGS prevr ON p.player_id = prevr.player_id
JOIN PLAYER_RATINGS curr ON p.player_id = curr.player_id
WHERE ps.season = prevr.season AND ps.season = curr.season-1;"))
tab = dbFetch(res)
dbClearResult(res)
tab
tab
library(DBI)
con <- dbConnect(RPostgres::Postgres(),
dbname = 'postgres',
host = 'localhost',
port = 5432,
user = 'postgres',
password = 'password')
res <- dbSendQuery(con, ("SELECT p.*, ps.*, curr.rating, prevr.*
FROM PLAYER p
JOIN PLAYER_STATS ps ON p.player_id = ps.player_id
JOIN PLAYER_RATINGS prevr ON p.player_id = prevr.player_id
JOIN PLAYER_RATINGS curr ON p.player_id = curr.player_id
WHERE ps.season = prevr.season AND ps.season = curr.season-1;"))
tab = dbFetch(res)
dbClearResult(res)
tab
library(DBI)
con <- dbConnect(RPostgres::Postgres(),
dbname = 'postgres',
host = 'localhost',
port = 5432,
user = 'postgres',
password = 'password')
res <- dbSendQuery(con, ("SELECT p.*, ps.*, curr.rating, prevr.*
FROM PLAYER p
JOIN PLAYER_STATS ps ON p.player_id = ps.player_id
JOIN PLAYER_RATINGS prevr ON p.player_id = prevr.player_id
JOIN PLAYER_RATINGS curr ON p.player_id = curr.player_id
WHERE ps.season = prevr.season AND ps.season = curr.season-1;"))
tab = dbFetch(res)
dbClearResult(res)
tab
library(tidyverse)
library(glmnet)
data<- tab #%>%
#select(player_name_futbin,rating,comp_id,apps,minutes,goals,xG,assists,xA,shots,key_passes,yellow_cards,red_cards,npg,npxG,xGChain,xGBuildup)
set.seed(100)
data[is.na(data)] <- 0
train <- data %>% sample_frac(size = 0.8, fac=rating)
test <- data %>% setdiff(train)
train
library(rpart)
library(rpart.plot)
form<- as.formula(rating~.)
mod_tree <- rpart(form,data=train)
library(randomForest)
mod_rf<- randomForest(form,train,ntree=1000,importance=TRUE)
mod_rf
# Get variable importance from the model fit
ImpData <- as.data.frame(importance(mod_rf))
ImpData$Var.Names <- row.names(ImpData)
ggplot(ImpData, aes(x=Var.Names, y=`%IncMSE`)) +
geom_segment( aes(x=Var.Names, xend=Var.Names, y=0, yend=`%IncMSE`), color="skyblue") +
geom_point(aes(size = IncNodePurity), color="blue", alpha=0.6) +
theme_light() +
coord_flip() +
theme(
legend.position="bottom",
panel.grid.major.y = element_blank(),
panel.border = element_blank(),
axis.ticks.y = element_blank()
)
res <- dbSendQuery(con, ("SELECT p.*, ps.*, curr.rating as currrating, prevr.*
FROM PLAYER p
JOIN PLAYER_STATS ps ON p.player_id = ps.player_id
JOIN PLAYER_RATINGS prevr ON p.player_id = prevr.player_id
JOIN PLAYER_RATINGS curr ON p.player_id = curr.player_id
WHERE ps.season = prevr.season AND ps.season = curr.season-1;"))
tab = dbFetch(res)
dbClearResult(res)
tab
library(tidyverse)
library(glmnet)
data<- tab #%>%
#select(player_name_futbin,rating,comp_id,apps,minutes,goals,xG,assists,xA,shots,key_passes,yellow_cards,red_cards,npg,npxG,xGChain,xGBuildup)
set.seed(100)
data[is.na(data)] <- 0
train <- data %>% sample_frac(size = 0.8, fac=rating)
test <- data %>% setdiff(train)
train
library(rpart)
library(rpart.plot)
form<- as.formula(currrating~.)
mod_tree <- rpart(form,data=train)
library(randomForest)
mod_rf<- randomForest(form,train,ntree=1000,importance=TRUE)
mod_rf
# Get variable importance from the model fit
ImpData <- as.data.frame(importance(mod_rf))
ImpData$Var.Names <- row.names(ImpData)
ggplot(ImpData, aes(x=Var.Names, y=`%IncMSE`)) +
geom_segment( aes(x=Var.Names, xend=Var.Names, y=0, yend=`%IncMSE`), color="skyblue") +
geom_point(aes(size = IncNodePurity), color="blue", alpha=0.6) +
theme_light() +
coord_flip() +
theme(
legend.position="bottom",
panel.grid.major.y = element_blank(),
panel.border = element_blank(),
axis.ticks.y = element_blank()
)
p1 <- predict(mod_rf, train)
confusionMatrix(p1, train$currrating)
library(caret)
p1 <- predict(mod_rf, train)
confusionMatrix(p1, train$currrating)
library(caret)
p1 <- predict(mod_rf, train)
p1
plot(mod_rf)
library(randomForest)
mod_rf<- randomForest(form,train,ntree=10000,importance=TRUE)
mod_rf
